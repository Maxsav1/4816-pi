from collections import defaultdict
import networkx as nx
import matplotlib.pyplot as plt
  
class Graph:
    # Конструктор класса 
    def __init__(self, vertices):
        self.V= vertices # Количество вершин
        self.graph = defaultdict(list) # Словарь, в котором храним граф
        self.len_graph = defaultdict(list) # Словарь, в котором храним степени вершин графа
  
    # Функция добавления ребра в граф
    def addEdge(self,u,v):
        self.graph[u].append(v)
 
    # Функция удаления ребра u-v из графа
    def rmvEdge(self, u, v):
        for index, key in enumerate(self.graph[u]):
            if key == v:
                self.graph[u].pop(index)
        for index, key in enumerate(self.graph[v]):
            if key == u:
                self.graph[v].pop(index)
 
    # Функция определения достижимых вершин из вершины v
    def DFSCount(self, v, visited):
        count = 1
        visited[v] = True
        for i in self.graph[v]:
            if visited[i] == False:
                count = count + self.DFSCount(i, visited)        
        return count
 
    # Функция, определеяющая, можно ли считать ребро u-v следукющим ребром
    # в Эйлеровом цикле
    def isValidNextEdge(self, u, v):
        # Ребро u-v можно использовать тогда, когда:
  
        #  1. v единственная соседняя вершина u
        if len(self.graph[u]) == 1:
            return True
        else:
            # 2. Если есть несколько соседий, то u-v не должно являтся мостом
            
            # Определим, является ли u-v мостом
            # 2.1 Определим количество вершин достижимых из  u      
            visited =[False]*(self.V)
            count1 = self.DFSCount(u, visited)
 
            # 2.2 Удалим ребро u-v и определелим количество достижимых вершин из u
            self.rmvEdge(u, v)
            visited =[False]*(self.V)
            count2 = self.DFSCount(u, visited)
 
            # 2.3 Вернем ребро обратно
            self.addEdge(u,v)
 
            # 2.4 Если count1 больше 1, значит при удалении увеличилось число компонент
            # связности графа и u-v является мостом
            return False if count1 > count2 else True
 
 
    # Функция вывода на экран ребра из цикла Эйлера
    def printEulerUtil(self, u):
        for v in self.graph[u]:
            # Если ребро u-v не удалено и оно является следующим ребром (не мост)
            if self.isValidNextEdge(u, v):
                print("%d-%d " %(u,v)),
                self.rmvEdge(u, v)
                self.printEulerUtil(v)
 
    # Функция определения степени вершин
    # для проверки существования цикла
    def degreeNode(self):
        for v in range(len(self.graph)):
            self.len_graph[v] = len(self.graph[v])
        
        count_node_even = 0
        node_not_even = []
        for v in range(len(self.len_graph)):
            if self.len_graph[v]%2 == 0:
                count_node_even += 1
            else:
                node_not_even.append(v)
        
        if count_node_even == len(self.len_graph):
            return True
        else:
            return node_not_even
    
    # Отрисовка графа
    def drawGraph(self, text_title):
        list_adjacency = []
        for v in range(len(self.graph)):
            for u in range(len(self.graph[v])):
                list_adjacency.append([v, self.graph[v][u], 1])
        fig = plt.figure()
        plt.title(text_title)
        G = nx.DiGraph()
        G.add_weighted_edges_from(list_adjacency)
        nx.draw(G, with_labels = True)
     
    # Основная функция
    def printEulerTour(self):
        u = 0
        for i in range(self.V):
            if len(self.graph[i]) %2 != 0:
                u = i
                break
        print ("\n")
        check_even = self.degreeNode()
        if check_even == True:
            self.drawGraph('Эйлеров цикл существует')
            self.printEulerUtil(u)
            
        else:
            self.drawGraph('Эйлеров цикл не существует')
            print('Эйлеров цикл не существует, так как имеются следующие')
            print('вершины c нечетной степенью:', *check_even)


if __name__ == '__main__':
    # Создаем экземпляр класса и добавляем необходимы ребра графа
    g = Graph(11)
    g.addEdge(1, 2)
    g.addEdge(1, 3)
    g.addEdge(2, 1)
    g.addEdge(2, 3)
    g.addEdge(2, 8)
    g.addEdge(2, 7)
    g.addEdge(3, 1)
    g.addEdge(3, 2)
    g.addEdge(3, 4)
    g.addEdge(3, 5)
    g.addEdge(4, 3)
    g.addEdge(4, 5)
    g.addEdge(5, 3)
    g.addEdge(5, 4)
    g.addEdge(5, 8)
    g.addEdge(5, 6)
    g.addEdge(6, 5)
    g.addEdge(6, 8)
    g.addEdge(6, 7)
    g.addEdge(6, 9)
    g.addEdge(7, 2)
    g.addEdge(7, 6)
    g.addEdge(7, 8)
    g.addEdge(7, 9)
    g.addEdge(8, 2)
    g.addEdge(8, 5)
    g.addEdge(8, 6)
    g.addEdge(8, 7)
    g.addEdge(9, 6)
    g.addEdge(9, 7)
    g.addEdge(9, 0)
    g.addEdge(9, 10)
    g.addEdge(0, 9)
    g.addEdge(0, 10)
    g.addEdge(10, 9)
    g.addEdge(10, 0)
    g.printEulerTour()
